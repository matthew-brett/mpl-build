# With infos from
# http://tjelvarolsson.com/blog/how-to-continuously-test-your-python-code-on-windows-using-appveyor/
# https://packaging.python.org/en/latest/appveyor/
# https://github.com/rmcgibbo/python-appveyor-conda-example

environment:

  global:
    PYTHONIOENCODING: UTF-8
    PYTEST_ARGS: --pyargs matplotlib
                 -rawR --numprocesses=auto --timeout=300 --durations=25
                 --cov-report= --cov=lib -m "not network"

  matrix:
    # theoretically the CONDA_INSTALL_LOCN could be only two: one for 32bit,
    # one for 64bit because we construct envs anyway. But using one for the
    # right python version is hopefully making it fast due to package caching.
    - PYTHON_VERSION: "3.7"
      CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
      TEST_ALL: "no"
      PYTHON_ARCH: 32
    - PYTHON_VERSION: "3.7"
      CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
      TEST_ALL: "no"
      PYTHON_ARCH: 64
    - PYTHON_VERSION: "2.7"
      CONDA_INSTALL_LOCN: "C:\\Miniconda-x64"
      TEST_ALL: "no"
    - PYTHON_VERSION: "3.5"
      CONDA_INSTALL_LOCN: "C:\\Miniconda35-x64"
      TEST_ALL: "no"
    - PYTHON_VERSION: "3.6"
      CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
      TEST_ALL: "no"
    - PYTHON_VERSION: "3.6"
      CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
      TEST_ALL: "no"

# We always use a 64-bit machine, but can build x86 distributions
# with the PYTHON_ARCH variable
platform:
    - x64

# all our python builds have to happen in tests_script...
build: false

cache:
  - '%LOCALAPPDATA%\pip\Cache'
  - '%USERPROFILE%\.cache\matplotlib'

init:
  - echo %PYTHON_VERSION% %CONDA_INSTALL_LOCN%

install:
  - set PATH=%CONDA_INSTALL_LOCN%;%CONDA_INSTALL_LOCN%\scripts;%PATH%;
  - set PYTHONUNBUFFERED=1
  # for msinttypes and newer stuff
  - conda config --set always_yes true
  # - conda update --all
  - conda config --set show_channel_urls yes
  - conda config --prepend channels conda-forge
  # this is now the downloaded conda...
  - conda info -a

  # For building, use a new environment which only includes the requirements for mpl
  # same things as the requirements in ci/conda_recipe/meta.yaml
  # if conda-forge gets a new pyqt, it might be nice to install it as well to have more backends
  # https://github.com/conda-forge/conda-forge.github.io/issues/157#issuecomment-223536381
  #
  - conda create -c anaconda -q -n test-environment python=%PYTHON_VERSION%
    msinttypes freetype=2.6 "libpng>=1.6.21,<1.7" zlib=1.2 tk=8.5
    pip setuptools
  - activate test-environment
  - pip install numpy mock tornado
  - echo %PYTHON_VERSION% %TARGET_ARCH%
  # pytest-cov>=2.3.1 due to https://github.com/pytest-dev/pytest-cov/issues/124
  - pip install -q "pytest!=3.3.0,>=3.2.0" "pytest-cov>=2.3.1" pytest-rerunfailures pytest-timeout pytest-xdist

  # Apply patch to `subprocess` on Python versions > 2 and < 3.6.3
  # https://github.com/matplotlib/matplotlib/issues/9176
  - python -c "import sys; sys.exit(not (3,) < sys.version_info < (3,6,3))" && (
    curl -sL https://github.com/python/cpython/pull/1224.patch |
    patch -fsup 1 -d %CONDA_PREFIX% ) || cmd /c "exit /b 0"

  # Let the install prefer the static builds of the libs
  - set LIBRARY_LIB=%CONDA_PREFIX%\Library\lib
  - mkdir lib || cmd /c "exit /b 0"
  - copy /y %LIBRARY_LIB%\zlibstatic.lib lib\z.lib
  - copy /y %LIBRARY_LIB%\libpng_static.lib lib\png.lib
  # These z.lib / png.lib are not static versions but files which end up as
  # dependencies to the dll file. This is fine for the conda build, but not here
  # and for the wheels
  - del %LIBRARY_LIB%\png.lib
  - del %LIBRARY_LIB%\z.lib
  - set MPLBASEDIRLIST=%CONDA_PREFIX%\Library\;.
  - cd matplotlib
  # enables the local freetype build
  - copy ci\travis\setup.cfg .
  # Show the installed packages + versions
  - conda list

test_script:
  # Now build the thing..
  - python setup.py bdist_wheel
  - ps: |
      # Install and upload artifact to Appveyor immediately after build.
      ls dist -r | Foreach-Object {
          appveyor PushArtifact $_.FullName
          pip install $_.FullName
      }
  # these should show no z, png, or freetype dll...
  - set "DUMPBIN=%VS140COMNTOOLS%\..\..\VC\bin\dumpbin.exe"
  - '"%DUMPBIN%" /DEPENDENTS lib\matplotlib\ft2font*.pyd | findstr freetype.*.dll && exit /b 1 || exit /b 0'
  - '"%DUMPBIN%" /DEPENDENTS lib\matplotlib\_png*.pyd | findstr z.*.dll && exit /b 1 || exit /b 0'
  - '"%DUMPBIN%" /DEPENDENTS lib\matplotlib\_png*.pyd | findstr png.*.dll && exit /b 1 || exit /b 0'

  # Test dependencies
  - pip install pandas sphinx tornado

  # this are optional dependencies so that we don't skip so many tests...
  - if x%TEST_ALL% == xyes conda install -q ffmpeg inkscape miktex pillow
  # missing packages on conda-forge for avconv imagemagick
  # This install sometimes failed randomly :-(
  #- choco install imagemagick

  # Test import of tkagg backend
  - python -c "import matplotlib as m; m.use('tkagg'); import matplotlib.pyplot as plt; print(plt.get_backend())"
  # tests
  - echo The following args are passed to pytest %PYTEST_ARGS%
  - python tests.py %PYTEST_ARGS%
